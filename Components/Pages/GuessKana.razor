@page "/GuessKana"
@rendermode InteractiveServer
@using System.Linq
@using ApprentissageKana.Components
@using Microsoft.AspNetCore.Components;

<div class="row">
    <div class="col-12 pt-3 text-center">
        <h1>Devine les kanas</h1>
    </div>

    <div class="col-12 text-center bigKana">
        @(toGuess.unicodeHiragana)
    </div>

    <div class="row">
        <div class="col-4" />
        <div class="col-4">
            <div class="input-group input-group-lg">
                <span class="input-group-text" id="inputGroup-sizing-lg">Kana</span>
                <input @onkeyup="PressKey" @bind=KanaToGuess type="text" class="form-control"
                    aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
            </div>
        </div>
        <div class="col-4" />
    </div>

    <div class="row pt-3">
        <div class="col-4" />
        <div class="col-4">
            <div class="row">
                <div class="col-6">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text" id="inputGroup-sizing-lg">Kanas trouvés</span>
                        <input readonly @bind=compteurDePoint type="text" class="form-control" 
                            aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                    </div>
                </div>
                <div class="col-6">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text" id="inputGroup-sizing-lg">Tentatives</span>
                        <input readonly @bind=compteurTotal type="text" class="form-control" 
                            aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                    </div>
                </div>
            </div>
        </div>
        <div class="col-4" />
    </div>

    @if (lastGuessWas != null)
    {
        <div class="row pt-3">
            <div class="col-4" />
            <div class="col-4 @statusToDisplay">
                @if (status == 1)
                {
                    <div>Bravo !</div>
                }
                else if (status == 2)
                {
                    <div>Erreur !</div>
                }
                Le kana précédent était @lastGuessWas.unicodeHiragana : @lastGuessWas.nom
            </div>
            <div class="col-4" />
        </div>
    }

    <div class="row pt-3">
        <div class="col-4" />
        <div class="col-4 row">
            <div class="col-12 col-md-4">
                <button class="btn btn-primary w-100" @onclick="Help">Aide</button>
            </div>
            <div class="col-12 col-md-4">
                <button class="btn btn-primary w-100" @onclick="Skip">Passer</button>
            </div>
            <div class="col-12 col-md-4">
                <button class="btn btn-primary w-100" @onclick="Submit">Valider</button>
            </div>
        </div>
        <div class="col-4" />
    </div>
</div>

@code {
    private List<Kana> listKanaToGuess = new List<Kana>();
    private Kana toGuess = new Kana ();
    private string KanaToGuess { get; set; } = String.Empty;
    private Kana? lastGuessWas { get; set; }
    private int status { get; set; } = 0;
    private string statusToDisplay { get; set; } = String.Empty;
    private int compteurDePoint { get; set; }
    private int compteurTotal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listKanaToGuess = Kana.initialiseAllKana();
        lastGuessWas = null;
        generateKanaToGuess();
    }

    private void generateKanaToGuess()
    {
        Random rand = new Random();
        toGuess = listKanaToGuess.ElementAt(rand.Next(listKanaToGuess.Count));
    }

    public void Help()
    {
        
    }

    public void Skip()
    {
        status = 0;
        resetInput();
        lastGuessWas = toGuess;
        generateKanaToGuess();
    }

    public void Submit()
    {
        if (!String.IsNullOrEmpty(KanaToGuess))
        {
            compteurTotal = compteurTotal + 1;
            if (toGuess.nom.ToLower().Equals(KanaToGuess.ToLower()))
            {
                status = 1;
                statusToDisplay = "alert alert-success";
                compteurDePoint = compteurDePoint + 1;
            }
            else
            {
                status = 2;
                statusToDisplay = "alert alert-danger";
            }
        }

        resetInput();
        lastGuessWas = toGuess;
        generateKanaToGuess();
    }

    public void PressKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            Submit();
        else if (e.Code == "ArrowRight")
            Skip();
    }

    private void resetInput ()
    {
        KanaToGuess = String.Empty;
    }
}
