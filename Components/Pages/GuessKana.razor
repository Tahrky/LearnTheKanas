@page "/GuessKana"
@rendermode InteractiveServer
@using System.Linq
@using ApprentissageKana.Components
@using ApprentissageKana.Components.Composants
@using ApprentissageKana.Components.Utils
@using Microsoft.AspNetCore.Components;

<div class="row">
    <div class="col-12 pt-3 text-center">
        <h1>Devine les kanas</h1>
    </div>

    <div class="row">
        <div class="col-4" />
        <div class="col-4">
            <div class="row">
                <div class="col-12 text-center bigKana @fontName">
                    @if (toGuess.kanaEnum == KanaEnum.Hiragana)
                    {
                        toGuess.texteAAfficher = toGuess.unicodeHiragana;
                    }
                    else if (toGuess.kanaEnum == KanaEnum.Katakana)
                    {
                        toGuess.texteAAfficher = toGuess.unicodeKatakana;
                    }
                    @(toGuess.texteAAfficher)
                </div>
            </div>

            <div class="row">
                <div class="col-12 input-group input-group-lg">
                    <span class="input-group-text" id="inputGroup-sizing-lg">Kana</span>
                    <input @onkeyup="PressKey" @bind=kanaToGuess type="text" class="form-control"
                        aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                </div>
            </div>

            <div class="row pt-3">
                <div class="col-6">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text" id="inputGroup-sizing-lg">Kanas trouvés</span>
                        <input readonly @bind=compteurDePoint type="text" class="form-control"
                                aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                    </div>
                </div>
                <div class="col-6">
                    <div class="input-group input-group-lg">
                        <span class="input-group-text" id="inputGroup-sizing-lg">Tentatives</span>
                        <input readonly @bind=compteurTotal type="text" class="form-control"
                                aria-label="Sizing example input" aria-describedby="inputGroup-sizing-lg">
                    </div>
                </div>
            </div>

            @if (lastGuessWas != null)
            {
                <div class="row pt-3">
                    <div class="col-12 pb-0">
                        <div class="@statusToDisplay h-100 ">
                            <div class="row h-100">
                                <span class="col-12 align-self-center">
                                    @(textToRender = String.Empty)
                                    @if (status == 1)
                                    {
                                        textToRender = "Bravo!";
                                    }
                                    else if (status == 2)
                                    {
                                        textToRender = "Erreur!";
                                    }
                                    @(textToRender += " Le kana précédent était " + lastGuessWas.texteAAfficher + " : " + lastGuessWas.nom)
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="row pt-3">
                <div class="col-12 col-md-4">
                    <button class="btn btn-primary w-100" @onclick="Help">Aide</button>
                </div>
                <div class="col-12 col-md-4">
                    <button class="btn btn-primary w-100" @onclick="Skip">Passer</button>
                </div>
                <div class="col-12 col-md-4">
                    <button class="btn btn-primary w-100" @onclick="Submit">Valider</button>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                <div class="border border-primary border-2 rounded col-6 offset-6">
                    <div class="p-3">
                        <div class="form-check">
                            <input @onchange="onChangeHiragana" class="form-check-input" type="checkbox" value="" checked>
                            <label class="form-check-label">
                                Hiragana
                            </label>
                        </div>
                        <div class="form-check">
                            <input @onchange="onChangeKatakana" class="form-check-input" type="checkbox" value="" checked>
                            <label class="form-check-label">
                                Katakana
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row pt-3">
                <div class="border border-primary border-2 rounded col-6 offset-6">
                    <div class="p-3">
                        <div class="form-check">
                            <input @onchange="onChangeFacile" class="form-check-input" type="checkbox" value="" checked>
                            <label class="form-check-label">
                                Polices faciles
                            </label>
                        </div>
                        <div class="form-check">
                            <input @onchange="onChangeIntermediaire" class="form-check-input" type="checkbox" value="" checked>
                            <label class="form-check-label">
                                Polices intermédiaires
                            </label>
                        </div>
                        <div class="form-check">
                            <input @onchange="onChangeDifficile" class="form-check-input" type="checkbox" value="">
                            <label class="form-check-label">
                                Polices difficiles
                            </label>
                        </div>
                        <div class="form-check">
                            <input @onchange="onChangeExotique" class="form-check-input" type="checkbox" value="">
                            <label class="form-check-label">
                                Polices exotiques
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Kana> listHiraganaToGuess = new List<Kana>();
    private List<Kana> listKatakanaToGuess = new List<Kana>();
    private Kana? lastGuessWas { get; set; }
    private Kana toGuess = new Kana ();

    // Récupère les informations que l’utilisateur a saisi
    private string kanaToGuess { get; set; } = String.Empty;
    private int status { get; set; } = 0;
    private string statusToDisplay { get; set; } = String.Empty;

    // Permet d’avoir une petite trace des points engrengés sur la session
    private int compteurDePoint { get; set; }
    private int compteurTotal { get; set; }

    // Permet d’afficher le texte à l’utilisateur
    private string textToRender { get; set; } = String.Empty;

    private bool hiragana { get; set; } = true;
    private bool katakana { get; set; } = true;

    private string fontName { get; set; } = "NotoSansJP";
    private List<Difficulte> fontsDifficulty = new List<Difficulte>();
    private List<Font> eligibleFonts = new List<Font>();

    protected override async Task OnInitializedAsync()
    {
        listHiraganaToGuess = Kana.initialiseAllKana();
        listKatakanaToGuess = Kana.initialiseAllKana();
        lastGuessWas = null;

        fontsDifficulty.Add(Difficulte.Facile);
        fontsDifficulty.Add(Difficulte.Intermediaire);
        eligibleFonts = Globales.AllFonts.Where(x => fontsDifficulty.Any(y => x.difficulte == y)).ToList();

        generateKanaToGuess();
    }

    private void onChangeFacile()
    {
        manageFonts(Difficulte.Facile);
        generateKanaToGuess();
    }

    private void onChangeIntermediaire()
    {
        manageFonts(Difficulte.Intermediaire);
        generateKanaToGuess();
    }

    private void onChangeDifficile()
    {
        manageFonts(Difficulte.Difficile);
        generateKanaToGuess();
    }

    private void onChangeExotique()
    {
        manageFonts(Difficulte.Exotique);
        generateKanaToGuess();
    }

    private void manageFonts (Difficulte diff)
    {
        if (fontsDifficulty.Any(x => x == diff))
            fontsDifficulty.Remove(diff);
        else
            fontsDifficulty.Add(diff);

        eligibleFonts = Globales.AllFonts.Where(x => fontsDifficulty.Any (y => x.difficulte == y)).ToList();
    }

    private void onChangeHiragana()
    {
        hiragana = !hiragana;
        generateKanaToGuess();
    }

    private void onChangeKatakana()
    {
        katakana = !katakana;
        generateKanaToGuess();
    }

    private void generateKanaToGuess()
    {
        Random rand = new Random();

        if (listHiraganaToGuess.Count == 0)
            listHiraganaToGuess = Kana.initialiseAllKana();

        if (listKatakanaToGuess.Count == 0)
            listKatakanaToGuess = Kana.initialiseAllKana();

        if (hiragana && katakana)
        {
            KanaEnum resultEnum = (KanaEnum)rand.Next(2);

            if (resultEnum == KanaEnum.Hiragana)
                updateGuess(ref listHiraganaToGuess, resultEnum);
            else if (resultEnum == KanaEnum.Katakana)
                updateGuess(ref listKatakanaToGuess, resultEnum);
        }
        else if (hiragana && !katakana)
            updateGuess(ref listHiraganaToGuess, KanaEnum.Hiragana);
        else if (katakana && !hiragana)
            updateGuess(ref listKatakanaToGuess, KanaEnum.Katakana);
    }

    public void updateGuess(ref List<Kana> listKana, KanaEnum resultEnum)
    {
        Random rand = new Random();
        toGuess = listKana.ElementAt(rand.Next(listKana.Count));
        listKana = listKana.Where(x => x.GetHashCode() != toGuess.GetHashCode()).ToList();
        toGuess.kanaEnum = resultEnum;

        if (eligibleFonts.Count == 0)
            fontName = "NotoSansJP";
        else
            fontName = eligibleFonts.ElementAt(rand.Next(eligibleFonts.Count)).nom;
    }

    public void Help()
    {

    }

    public void Skip()
    {
        resetInput();
        lastGuessWas = toGuess;
        generateKanaToGuess();
    }

    public void Submit()
    {
        if (!String.IsNullOrEmpty(kanaToGuess))
        {
            compteurTotal = compteurTotal + 1;
            if (toGuess.nom.ToLower().Equals(kanaToGuess.ToLower()))
            {
                status = 1;
                statusToDisplay = "alert alert-success";
                compteurDePoint = compteurDePoint + 1;
            }
            else
            {
                status = 2;
                statusToDisplay = "alert alert-danger";
            }

            resetInput(false);
        }
        else
            resetInput();

        lastGuessWas = toGuess;
        generateKanaToGuess();
    }

    public void PressKey(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            Submit();
        else if (e.Code == "ArrowRight")
            Skip();
    }

    private void resetInput (bool resetAll = true)
    {
        kanaToGuess = String.Empty;

        if (resetAll)
        {
            status = 0;
            statusToDisplay = String.Empty;
        }
    }
}
